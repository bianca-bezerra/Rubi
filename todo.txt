Necessários:

OK - Decrementar views
OK - Bios com aspa simples quebram o update
OK? - Terminar respositoriosSQL
OK - Curtir/descurtir e decrementarViews nao funciona nos outros repos
OK - Apagar branch maven e usar a main como main
OK - Fazer validaçao do numero de caracteres 
OK - Fazer validação da entrada de dados
OK - Atualizar as funcoes de remover e atualizar perfil
OK - exibirPostagensPorPerfil nao ta funcionando tanto no SQL quanto no File, mas exibirPostagensPopulares está...
OK - Ajeitar RedeSocial
OK - Ajeitar os metodos Remover de RPostagensFile
OK - RedeSocial tá instanciando com File por padrão já...
OK - Se não houverem mais linhas, o RPerfisFile deveria apgato arquivo de perfis.txt
OK - Ajeitar o remover perfil
OK - Terminar RepositoriosPerfisArray
OK - Terminar repositoriosArray
OK - Fazer com que os arquivos e pastas só sejam criados se existerem perfis/postagens
OK - Ajeitar App e permitir a escolha da instanciacao
OK - Ajeitar consultar de RPostagens
OK - Ajeitar os metodos Remover de RPerfisFile
OK - O arquivo de perfis.txt tá com duas linhas...
OK - Ajeitar o consultar de RPerfis
OK - Terminar RepositoriosPerfisFile
OK - A persistência em arquivos não funciona se o diretório 'db' não existir
OK - Remover verificacoes de nulo de RedeSocial e deixar só em Repositorios
OK - tirar os construtores que so recebm uma string do perfil e de psotagens, deixar isso a cargo do repositorio
OK - colocar o atributo idPerfil dentro de postagem...
OK - Terminar RepositoriosPostagensFile
OK - Adicionar um removerPostsPorPerfil em cada RepositoriosPostagens

Extras:

- O "Oi 'nome' seja bem vindo" vai pegar só o primeiro nome da pessoa...
- Mudar nome usuarioJaExiste
- Remover postagens?
- Implementar consulta por mais de uma hashtag
- Refazer a lógica de exibirHastagsPopulares
- Atualizar o .plantuml

Férias:

- Sistema de seguir/bloquear
- Adicionar imagens (JFileChooser+IJ?)
- Melhorar interface (Web ou tlvz JavaFx)


Apendice:

- Tratamento para exceções SQL:

} catch (SQLException e) {
    System.err.println(
            "SQL não está funcionando no momento, por favor tente novamente com outro tipo de persistência..."
                    + e.getMessage());
    e.printStackTrace();
    System.err.flush();
    System.exit(1);
    }


Falecidas:

// case REMOVER_POSTAGEM:

//     username = lerString("Digite o username do perfil buscado: ", input);
//     perfilBuscado = Rubi.consultarPerfilPorUsername(username);
//     String hashtagParaORemoverPostagem =  null;
//     if(perfilBuscado.isPresent()){
//         texto = lerString("Digite o texto da postagem buscada: ", input);
//         if(lerString("Deseja buscar por hashtag tambem? (Enter - Nao, 1 - Sim)", input).equals("1")){
//             hashtagParaORemoverPostagem = lerString("Digite uma hashtag: ",input);
//         }
//         Rubi.removerPostagem(texto,perfilBuscado.get(), hashtagParaORemoverPostagem);
//         System.out.println("Postagem removida com sucesso!");
//     }else{
//         System.out.println(RED_BOLD_BRIGHT+"Perfil não encontrado!"+RESET);
//     }
//     break;

// public ArrayList<PostagemAvancada> exibirPostagensPorHashtags(String hashtags){
    
//     Stream <String> streamHashs = Arrays.asList(hashtags.split("#")).stream();
//     ArrayList<String> listaHashtags = new ArrayList<>(streamHashs.map(hash -> hash.trim()).toList());
//     Stream <PostagemAvancada> filtrados = _postagens.getPostagensAvancadas().stream();
//     filtrados = filtrados.filter(post -> {
//         if(post.ehExibivel()){
//             for(int i = 0; i< listaHashtags.size(); i++){
//                 if(post.existeHashtag(listaHashtags.get(i))){
//                     post.decrementarVisualizacoes();
//                     return true;
//                 }
//             }
//         }return false;
//     }); 
//     List <PostagemAvancada> saida = new ArrayList<>();
//     filtrados.sorted( (o1, o2)->o2.getData().compareTo(o1.getData()) ).forEach(p -> saida.add((PostagemAvancada)p));
//     return new ArrayList<>(saida);
// }

package com.ruanbianca.redesocial;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Conexao {
    public static void main(String[] args) {
        Connection conexao = null;  
        //Statement statement = null;

        try {
            // Carregando o driver JDBC
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Configurando a URL do banco de dados
            String url = "jdbc:mysql://localhost:3306/rubi";
            String usuario = "root";
            String senha = "123456";

            // Estabelecendo a conexão
            conexao = DriverManager.getConnection(url, usuario, senha);
           
            // Faça o que precisa ser feito com a conexão aqui

            System.out.println("Conexão bem-sucedida!");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (conexao != null && !conexao.isClosed()) {
                    conexao.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

// public class Conexao {

//     public static Connection getConnection(){
//         Connection conexao = null;

//         try {
//             String driver = "com.mysql.jdbc.Driver";
//             Class.forName(driver);

//             String url = "jdbc:mysql://localhost:3306/rubi";
//             String username = "root";
//             String password = "123456";

//             conexao = DriverManager.getConnection(url,username,password);

//             System.out.println("Conexõa bem-sucedida :D");

//             //faz os babados aqui
//             return conexao;

//         }catch(ClassNotFoundException e){
//             System.out.println("Driver do banco de dados não encontrado :P");
//             return null;

//         }catch(SQLException e){
//             System.out.println("Erro ao acessar o banco: " + e.getMessage());
//             return null;

//         }finally { 
//             try {
//                 if(conexao != null && !conexao.isClosed()){
//                     conexao.close();
//                 }
//             } catch(SQLException e){
//                 System.out.println("Erro ao fechar a conexão...");
//             }
//         }
        
//     }

//     public static void main(String[] args) {
//         getConnection();
//     }
// }